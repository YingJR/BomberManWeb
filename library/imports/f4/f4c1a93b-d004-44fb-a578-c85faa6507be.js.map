{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "//import player.js\r\n// const player = require('player');\r\nvar DIR = cc.Enum({\r\n    None:0,\r\n    UP:1,\r\n    DOWN:2,\r\n    LEFT:3,\r\n    RIGHT:4,\r\n});\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        speed:2,\r\n        \r\n        // player: {\r\n        //     default: null,\r\n        //     type: player\r\n        // },\r\n    },\r\n\r\n    onLoad: function () {\r\n\r\n        this.loadMap();\r\n        this.player = this.node.getChildByName('player');\r\n        var player1= this.player;\r\n        \r\n        this.tiledMap = this.node.getComponent(cc.TiledMap);\r\n        // var point = this.node.convertToNodeSpace(this.player.node.getPosition());\r\n\r\n        var self = this;\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed: function(keyCode, event) {\r\n                var newTile = cc.p(self.playerTile.x, self.playerTile.y);\r\n                switch(keyCode) {\r\n                    case cc.KEY.up:\r\n                        newTile.y -= 1;\r\n                        break;\r\n                    case cc.KEY.down:\r\n                        newTile.y += 1;\r\n                        break;\r\n                    case cc.KEY.left:\r\n                        newTile.x -= 1;\r\n                        break;\r\n                    case cc.KEY.right:\r\n                        newTile.x += 1;\r\n                        break;\r\n                }\r\n\r\n                self.tryMoveToNewTile(newTile);\r\n                \r\n            }\r\n        },self.node);\r\n    },\r\n    \r\n\r\n    \r\n    // tryMoveToNewTile: function(newTile) {\r\n    //     var mapSize = this.tiledMap.getMapSize();\r\n    //     if (newTile.x < 0 || newTile.x >= mapSize.width) return;\r\n    //     if (newTile.y < 0 || newTile.y >= mapSize.height) return;\r\n        \r\n    //     if (this.barriers.getTileGIDAt(newTile)) {//GID=0,则该Tile为空\r\n    //         cc.log('This way is blocked!');\r\n    //         return false;\r\n    //     }\r\n        \r\n    //     // this.tryCatchStar(newTile);\r\n        \r\n    //     this.playerTile = newTile;\r\n    //     this.updatePlayerPos();\r\n        \r\n    //     if (cc.pointEqualToPoint(this.playerTile, this.endTile)) {\r\n    //         cc.log('succeed');\r\n    //     }\r\n    // },\r\n    \r\n\r\n    //加载地图文件时调用\r\n    loadMap: function () {\r\n\r\n        //地图\r\n        this.tiledMap = this.node.getComponent(cc.TiledMap);\r\n        \r\n        //players对象层\r\n        var players = this.tiledMap.getObjectGroup('players');\r\n\r\n        var player1Point = players.getObject('player1');\r\n        var player1Pos = cc.p(player1Point.x, player1Point.y);\r\n        // console.log(player1Pos);\r\n        this.barriers = this.tiledMap.getLayer('障礙層');\r\n        this.building = this.tiledMap.getLayer('建築層');     \r\n        //startPoint和endPoint对象\r\n        // var startPoint = players.getObject('startPoint');\r\n        // var endPoint = players.getObject('endPoint');\r\n        \r\n        //像素坐标\r\n        // var startPos = cc.p(startPoint.x, startPoint.y);\r\n        // var endPos = cc.p(endPoint.x, endPoint.y);\r\n        \r\n        //障碍物图层和星星图层\r\n        // this.barriers = this.tiledMap.getLayer('barriers');\r\n        // this.stars = this.tiledMap.getLayer('stars');\r\n        \r\n        //出生Tile和结束Tile\r\n        this.playerTile = this.startTile = this.getTilePos(player1Pos);\r\n        // console.log(this.playerTile);\r\n        // this.endTile = this.getTilePos(endPos);\r\n        this.player = this.node.getChildByName('player');\r\n        //更新player位置\r\n        this.updatePlayerPos();\r\n\r\n    },\r\n    \r\n    tryMoveToNewTile: function(newTile) {\r\n        var mapSize = this.tiledMap.getMapSize();\r\n        if (newTile.x < 0 || newTile.x >= mapSize.width) return;\r\n        if (newTile.y < 0 || newTile.y >= mapSize.height) return;\r\n        \r\n        // if (this.barriers.getTileGIDAt(newTile)) {//GID=0,则该Tile为空\r\n        //     cc.log('This way is blocked!');\r\n        //     return false;\r\n        // }\r\n        if (this.building.getTileGIDAt(newTile)) {//GID=0,则该Tile为空\r\n            cc.log('This way is blocked!');\r\n            return false;\r\n        }\r\n        \r\n        \r\n        this.playerTile = newTile;\r\n        this.updatePlayerPos();\r\n        \r\n    },\r\n    \r\n    tryMove: function(dir) {\r\n         var speed =this.speed;\r\n         switch(dir) {\r\n            case DIR.UP:\r\n                this.player.y+=speed;\r\n                break;\r\n            case DIR.DOWN:\r\n                this.player.y-=speed;\r\n                break;\r\n            case DIR.LEFT:\r\n                this.player.x-=speed;\r\n                break;\r\n            case DIR.RIGHT:\r\n                this.player.x+=speed;\r\n                break;\r\n        }\r\n    },\r\n\r\n    \r\n    //将像素坐标转化为瓦片坐标\r\n    getTilePos: function(posInPixel) {\r\n        var mapSize = this.node.getContentSize();\r\n        var tileSize = this.tiledMap.getTileSize();\r\n        var x = Math.floor(posInPixel.x / tileSize.width);\r\n        var y = Math.floor((mapSize.height - posInPixel.y) / tileSize.height);\r\n        return cc.p(x, y);\r\n    },\r\n\r\n    updatePlayerPos: function() {\r\n        // var pos = this.barriers.getPositionAt(this.playerTile);\r\n        var tileSize = this.tiledMap.getTileSize();\r\n        var posX=this.playerTile.x * tileSize.width + (tileSize.width / 2);    \r\n        var posY=-1 * (this.playerTile.y * tileSize.height + tileSize.height);\r\n        // console.log(posX+\":\"+posY);\r\n        // this.player.setPosition(pos);\r\n        \r\n        // var action = cc.moveTo(0.5, posX, posY);\r\n        // 执行动作\r\n        \r\n        // this.player.runAction(action);\r\n        \r\n        \r\n        \r\n        this.player.x=posX;\r\n        this.player.y=posY;\r\n                \r\n        // console.log(this.player.x);\r\n    },\r\n    \r\n});\r\n"
  ]
}